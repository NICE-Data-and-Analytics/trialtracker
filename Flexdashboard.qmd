---
title: "TrialTracker Dashboard"
format: 
  dashboard:
    includes:
      in-header: Secrets/GA_Script.html
    css: styles.css
server: shiny
brand: _brand.yml
---

```{r setup}
#| echo: false
#| include: false
  
main_con <- DBI::dbConnect(RSQLite::SQLite(), file.path("inst", "extdata", "RSQLite_Data", "TrialTracker-db.sqlite"))
trial_id_df <- DBI::dbReadTable(main_con, "Trial_Ids")

clean_UTF <- function(x) {
  iconv(x, "UTF-8", "UTF-8", sub = "")
}

# Regex patterns
NCT_pattern <- "NCT[0-9]{8}"
EU_pattern <- "[0-9]{4}-[0-9]{6}-[0-9]{2}"
ISRCTN_pattern <- "ISRCTN[0-9]{8}"
NIHR_pattern <- "(NIHR[0-9]{0,6})|(RP-PG-[0-9]{4}-[0-9]{4,5})|([0-9]{2,3}[/-][0-9]{2,4}[/-][0-9]{2,4})|(^ICA-.*-[0-9]{3})"
```

# Live Trial Info

**Last refreshed: `r file.info("inst/extdata/RSQLite_Data/TrialTracker-db.sqlite")$mtime |> format.POSIXct(digits = 0)`**

::: {.panel-tabset}

## ClinicalTrials.gov

```{r CGTlive}
# create added_dates
NCT_dates <- DBI::dbReadTable(main_con, "NCT") |>
  dplyr::summarise("Date Added" = lubridate::as_date(min(Query_Date - 1L)), .by = NCTId)

DBI::dbReadTable(main_con, "NCT") |>
  dplyr::filter(NCTId %in% trial_id_df$NCT_Ids) |>
  dplyr::left_join(NCT_dates) |> # Add date added field
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE) |>
  dplyr::select(-Query_Date, -SeeAlsoLinkURL) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::mutate(across(
    c(PrimaryCompletionDate:LastUpdatePostDate),
    \(x) lubridate::as_date(lubridate::parse_date_time(x, c("ymd", "bdy"), truncated = 1L))
  )) |>
  dplyr::rename(
    Guideline = Guideline.number,
    `NCT ID` = NCTId,
    `Org Study ID` = OrgStudyId,
    Title = BriefTitle,
    Status = OverallStatus,
    `Primary Completion Date` = PrimaryCompletionDate,
    `Completion Date` = CompletionDate,
    `Results Submit Date` = ResultsFirstSubmitDate,
    `Results Post Date` = ResultsFirstPostDate,
    `Last Update` = LastUpdatePostDate
  ) |>
  dplyr::arrange(desc(`Date Added`), Program, Guideline, `NCT ID`) |>
  dplyr::distinct() |>
  DT::datatable(
    options = list(bPaginate = FALSE, scrollY = TRUE),
    filter = "top"
  )
```

## ISRCTN

```{r ISCTNlive}
# create added_dates
ISRCTN_dates <- DBI::dbReadTable(main_con, "ISRCTN") |>
  dplyr::summarise("Date Added" = lubridate::as_date(min(Query_Date - 1L)), .by = ISRCTN_No)

DBI::dbReadTable(main_con, "ISRCTN") |>
  dplyr::filter(ISRCTN_No %in% trial_id_df$ISRCTN_Ids) |>
  dplyr::left_join(ISRCTN_dates) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE) |>
  dplyr::select(-Query_Date) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    `Results completed date` = lubridate::dmy(Results_date_completed),
    `Results posted date` = lubridate::dmy(Results_date_posted),
    `Results published date` = lubridate::dmy(Results_date_first_publication)
  ) |>
  dplyr::distinct() |>
  dplyr::rename(
    Guideline = Guideline.number,
    `ISRCTN ID` = ISRCTN_No,
    Title = Public_Title,
    `Scientific Title` = Scientific_Title,
    `Recruitment Status` = Recruitment_Status,
    `Results URL` = Results_url_link,
    `Results summary` = Results_summary
  ) |>
  dplyr::arrange(desc(`Date Added`), Program, Guideline, `ISRCTN ID`) |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

## NIHR

```{r NIHRlive}
# create added_dates
NIHR_dates <- DBI::dbReadTable(main_con, "NIHR") |>
  dplyr::summarise("Date Added" = lubridate::as_date(min(Query_Date - 1L)), .by = project_id)

DBI::dbReadTable(main_con, "NIHR") |>
  dplyr::mutate(project_id_filter = stringr::str_replace_all(project_id, "[^\\d]", "")) |>
  dplyr::filter(project_id_filter %in% stringr::str_replace_all(trial_id_df$NIHR_Ids, "[^\\d]", "")) |>
  dplyr::select(-project_id_filter) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE) |>
  dplyr::select(-Query_Date) |>
  dplyr::left_join(NIHR_dates) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::rename(
    Guideline = Guideline.number,
    `NIHR ID` = project_id,
    `Project Title` = project_title,
    Status = project_status,
    `End Date` = end_date
  ) |>
  dplyr::arrange(desc(`Date Added`), Program, Guideline, `NIHR ID`) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

## Clinicaltrials.eu

```{r EUlive}

# create added_dates
EU_dates <- DBI::dbReadTable(main_con, "EU") |>
  dplyr::summarise("Date Added" = lubridate::as_date(min(Query_Date - 1L)), .by = EU_Ids)

DBI::dbReadTable(main_con, "EU") |>
  dplyr::mutate(short_id = stringr::str_sub(`X_id`, 1L, 14L)) |>
  dplyr::filter(short_id %in% trial_id_df$EU_Ids) |>
  dplyr::left_join(EU_dates) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE) |>
  dplyr::select(
    -Query_Date, -a31_title_of_the_trial_for_lay_people_in_easily_understood_ie_nontechnical_language, -EU_Ids, -short_id
  ) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::rename(
    Guideline = Guideline.number,
    `Clinicaltrials.eu ID` = `X_id`,
    `End of Trial Status` = p_end_of_trial_status,
    Title = a3_full_title_of_the_trial,
    `Abbreviated Title` = a32_name_or_abbreviated_title_of_the_trial_where_available,
    `Sponsor ID` = a41_sponsors_protocol_code_number
  ) |>
  dplyr::arrange(desc(`Date Added`), Program, Guideline, `Clinicaltrials.eu ID`) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")

```

:::

# Recent Status Changes

**Last refreshed: `r file.info("inst/extdata/RSQLite_Data/TrialTracker-db.sqlite")$mtime |> format.POSIXct(digits = 0)`**\
**Changes are from 31 days ago**

::: {.panel-tabset}

### ClinicalTrials.gov

```{r CGTmonthlychange}
new_df <- DBI::dbReadTable(main_con, "NCT") |>
  dplyr::filter(NCTId %in% trial_id_df$NCT_Ids) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE) |>
  dplyr::mutate(across(c(PrimaryCompletionDate:LastUpdatePostDate), \(x) lubridate::as_date(lubridate::parse_date_time(x, c("ymd", "bdy"), truncated = 1L))))

old_df <- DBI::dbReadTable(main_con, "NCT") |>
  dplyr::filter(
    Query_Date <= Sys.Date() - 31L,
    NCTId %in% trial_id_df$NCT_Ids
  ) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE) |>
  dplyr::mutate(across(c(PrimaryCompletionDate:LastUpdatePostDate), \(x) lubridate::as_date(lubridate::parse_date_time(x, c("ymd", "bdy"), truncated = 1L))))

compareDF::compare_df(new_df,
  old_df,
  group_col = c("Guideline.number", "NCTId"),
  exclude = c(
    "Query_Date",
    "Comments",
    "Condition",
    "BriefTitle",
    "Acronym",
    "PrimaryCompletionDate",
    "ResultsFirstSubmitDate",
    "SeeAlsoLinkURL"
  ),
  stop_on_error = FALSE
)$comparison_df |>
  dplyr::left_join(
    (new_df |>
      dplyr::select(
        BriefTitle,
        Program,
        Guideline.number,
        URL,
        NCTId,
        Condition,
        ResultsFirstSubmitDate,
        Acronym,
        Comments
      )),
    by = c("Program", "Guideline.number", "URL", "NCTId")
  ) |>
  dplyr::mutate(
    URL2 = paste0("https://clinicaltrials.gov/ct2/show/", NCTId),
    Title = stringr::str_trunc(BriefTitle, 80L),
    Condition = stringr::str_trunc(Condition, 30L)
  ) |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::mutate(across(c(CompletionDate:LastUpdatePostDate), \(x) lubridate::as_date(lubridate::parse_date_time(x, c("ymd", "bdy"), truncated = 1L)))) |>
  dplyr::select(
    Change = chng_type,
    Program,
    Guideline = Guideline.number,
    URL = URL2,
    Acronym,
    Title,
    Condition,
    Status = OverallStatus,
    `Completion Date` = CompletionDate,
    `Results Submit Date` = ResultsFirstSubmitDate,
    `Last Update Date` = LastUpdatePostDate,
    Comments
  ) |>
  dplyr::distinct() |>
  DT::datatable(
    options = list(bPaginate = FALSE, scrollY = TRUE),
    filter = "top"
  )
```

### ISRCTN

```{r ISRCTNmonthlychange}
new_df <- DBI::dbReadTable(main_con, "ISRCTN") |>
  dplyr::filter(ISRCTN_No %in% trial_id_df$ISRCTN_Ids) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE)

old_df <- DBI::dbReadTable(main_con, "ISRCTN") |>
  dplyr::filter(
    Query_Date <= Sys.Date() - 31L,
    ISRCTN_No %in% trial_id_df$ISRCTN_Ids
  ) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE)

compareDF::compare_df(new_df,
  old_df,
  group_col = c("Guideline.number", "ISRCTN_No"),
  exclude = c("Query_Date", "Comments"),
  stop_on_error = FALSE
)$comparison_df |>
  dplyr::left_join(new_df) |>
  dplyr::mutate(Title = stringr::str_trunc(Scientific_Title, 75L)) |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    Results_date_completed = lubridate::dmy(Results_date_completed),
    Results_date_posted = lubridate::dmy(Results_date_posted),
    Results_date_first_publication = lubridate::dmy(Results_date_first_publication)
  ) |>
  dplyr::select(
    Change = chng_type,
    Program,
    "Guideline" = Guideline.number,
    URL,
    Acronym,
    Title,
    Status = Recruitment_Status,
    `Results URL` = Results_url_link,
    `Results Summary` = Results_summary,
    `Results Completed` = Results_date_completed,
    `Results Posted` = Results_date_posted,
    `Results Published` = Results_date_first_publication
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### NIHR

```{r NIHRmonthlychange}
new_df <- DBI::dbReadTable(main_con, "NIHR") |>
  dplyr::mutate("project_id_filter" = stringr::str_replace_all(project_id, "[^\\d]", "")) |>
  dplyr::filter(project_id_filter %in% stringr::str_replace_all(trial_id_df$NIHR_Ids, "[^\\d]", "")) |>
  dplyr::select(-project_id_filter) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE)

old_df <- DBI::dbReadTable(main_con, "NIHR") |>
  dplyr::mutate("project_id_filter" = stringr::str_replace_all(project_id, "[^\\d]", "")) |>
  dplyr::filter(project_id_filter %in% stringr::str_replace_all(trial_id_df$NIHR_Ids, "[^\\d]", "")) |>
  dplyr::select(-project_id_filter) |>
  dplyr::filter(Query_Date <= Sys.Date() - 31L) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE)

compareDF::compare_df(
  new_df,
  old_df,
  group_col = c("Guideline.number", "project_id"),
  exclude = c("Query_Date", "Comments"),
  stop_on_error = FALSE
)$comparison_df |>
  dplyr::left_join(new_df) |>
  dplyr::mutate(
    Title = stringr::str_trunc(project_title, 90L)
  ) |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::select(
    Change = chng_type,
    Program,
    "Guideline" = Guideline.number,
    URL,
    `NIHR ID` = project_id,
    Title,
    Status = project_status,
    `End Date` = end_date
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### Clinicaltrials.eu

```{r Clinicaltrials.eumonthlychange}
new_df <- DBI::dbReadTable(main_con, "EU") |>
  dplyr::filter(EU_Ids %in% trial_id_df$EU_Ids) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE)

old_df <- DBI::dbReadTable(main_con, "EU") |>
  dplyr::filter(
    Query_Date <= Sys.Date() - 30L,
    EU_Ids %in% trial_id_df$EU_Ids
  ) |>
  dplyr::slice_max(Query_Date, n = 1L, with_ties = TRUE)

compareDF::compare_df(
  new_df,
  old_df,
  group_col = c("Guideline.number", "EU_Ids"),
  exclude = c("Query_Date", "Comments"),
  stop_on_error = FALSE
)$comparison_df |>
  dplyr::left_join(new_df) |>
  dplyr::mutate(Title = stringr::str_trunc(a3_full_title_of_the_trial, 90L)
  ) |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::select(
    Change = chng_type,
    Program,
    Guideline = Guideline.number,
    URL,
    `EU ID` = EU_Ids,
    Status = p_end_of_trial_status,
    Acronym = a32_name_or_abbreviated_title_of_the_trial_where_available,
    Title
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```
:::

# No Changes in Last 6m

**Last refreshed: `r file.info("inst/extdata/RSQLite_Data/TrialTracker-db.sqlite")$mtime |> format.POSIXct(digits = 0)`**

::: {.panel-tabset}
### ClinicalTrials.gov

```{r nochangeCTG}
current <- DBI::dbReadTable(main_con, "NCT") |>
  dplyr::filter(Query_Date == lubridate::as_date(max(Query_Date)))

old <- DBI::dbReadTable(main_con, "NCT") |>
  dplyr::filter(Query_Date == (lubridate::as_date(max(Query_Date)) - months(6L)))

dplyr::inner_join(current, old, by = names(current)[2L:(ncol(current) - 1L)], keep = FALSE) |>
  dplyr::select(-contains(".x")) |>
  dplyr::select(-contains(".y")) |>
  dplyr::left_join(NCT_dates) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::select(-SeeAlsoLinkURL) |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::mutate(across(c(PrimaryCompletionDate:LastUpdatePostDate), \(x) lubridate::as_date(lubridate::parse_date_time(x, c("ymd", "bdy"), truncated = 1L)))) |>
  dplyr::rename(
    "Guideline" = Guideline.number,
    `NCT ID` = NCTId,
    `Org Study ID` = OrgStudyId,
    Title = BriefTitle,
    Status = OverallStatus,
    `Primary Completion Date` = PrimaryCompletionDate,
    `Completion Date` = CompletionDate,
    `Results Submit Date` = ResultsFirstSubmitDate,
    `Results Post Date` = ResultsFirstPostDate,
    `Last Update` = LastUpdatePostDate
  ) |>
  dplyr::distinct() |>
  DT::datatable(
    options = list(bPaginate = FALSE, scrollY = TRUE),
    filter = "top"
  )
```

### ISRCTN

```{r nochangeISRCTN}
current <- DBI::dbReadTable(main_con, "ISRCTN") |>
  dplyr::filter(Query_Date == lubridate::as_date(max(Query_Date)))

old <- DBI::dbReadTable(main_con, "ISRCTN") |>
  dplyr::filter(Query_Date == (lubridate::as_date(max(Query_Date)) - months(6L)))

dplyr::inner_join(current, old, by = names(current)[2L:(ncol(current) - 1L)], keep = FALSE) |>
  dplyr::select(-contains(".x")) |>
  dplyr::select(-contains(".y")) |>
  dplyr::left_join(ISRCTN_dates) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    Results_date_completed = lubridate::dmy(Results_date_completed),
    Results_date_posted = lubridate::dmy(Results_date_posted),
    Results_date_first_publication = lubridate::dmy(Results_date_first_publication)
  ) |>
  dplyr::rename(
    "Guideline" = Guideline.number,
    `ISRCTN ID` = ISRCTN_No,
    Title = Public_Title,
    `Scientific Title` = Scientific_Title,
    `Recruitment Status` = Recruitment_Status,
    `Results completed date` = Results_date_completed,
    `Results URL` = Results_url_link,
    `Results summary` = Results_summary,
    `Results posted date` = Results_date_posted,
    `Results published date` = Results_date_first_publication
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### NIHR

```{r nochangeNIHR}
current <- DBI::dbReadTable(main_con, "NIHR") |>
  dplyr::filter(Query_Date == lubridate::as_date(max(Query_Date)))

old <- DBI::dbReadTable(main_con, "NIHR") |>
  dplyr::filter(Query_Date == (lubridate::as_date(max(Query_Date)) - months(6L)))

dplyr::inner_join(current, old, by = names(current)[2L:(ncol(current) - 1L)], keep = FALSE) |>
  dplyr::select(-contains(".x")) |>
  dplyr::select(-contains(".y")) |>
  dplyr::left_join(NIHR_dates) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::rename(
    "Guideline" = Guideline.number,
    `NIHR ID` = project_id,
    `Project Title` = project_title,
    Status = project_status,
    `End Date` = end_date
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### Clinicaltrials.eu

```{r nochangeEU}
current <- DBI::dbReadTable(main_con, "EU") |>
  dplyr::filter(Query_Date == lubridate::as_date(max(Query_Date)))

old <- DBI::dbReadTable(main_con, "EU") |>
  dplyr::filter(Query_Date == (lubridate::as_date(max(Query_Date)) - months(6L)))

dplyr::inner_join(current, old, by = names(current)[2L:(ncol(current) - 1L)], keep = FALSE) |>
  dplyr::select(-contains(".x")) |>
  dplyr::select(-contains(".y")) |>
  dplyr::left_join(EU_dates) |>
  dplyr::select(-a31_title_of_the_trial_for_lay_people_in_easily_understood_ie_nontechnical_language, -EU_Ids) |>
  dplyr::select(Program, Guideline.number, `Date Added`, everything()) |> # reorder
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::distinct() |>
  dplyr::rename(
    "Guideline" = Guideline.number,
    `Clinicaltrials.eu ID` = `X_id`,
    `End of Trial Status` = p_end_of_trial_status,
    Title = a3_full_title_of_the_trial,
    `Abbreviated Title` = a32_name_or_abbreviated_title_of_the_trial_where_available,
    `Sponsor ID` = a41_sponsors_protocol_code_number
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```
:::

# Pubmed Publications

**Last refreshed: `r file.info("inst/extdata/RSQLite_Data/TrialTracker-db.sqlite")$mtime |> format.POSIXct(digits = 0)`**

::: {.panel-tabset}

### ClinicalTrials.gov

```{r CTGpubstable}
DBI::dbReadTable(main_con, "NCT_PM") |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::mutate(
    Query_Date = format(as.Date(as.numeric(Query_Date), origin = "1970-01-01"), "%Y/%m/%d"),
    abstract = stringr::str_trunc(abstract, 200L)
  ) |>
  dplyr::select(
    Program,
    "Guideline" = Guideline.number,
    `Query Date` = Query_Date,
    `Trial ID` = ID,
    PMID = pmid,
    `Publication DOI` = doi,
    Title = title,
    Abstract = abstract,
    Journal = jabbrv,
    Condition = Short..working.title.
  ) |>
  dplyr::arrange(desc(`Query Date`)) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### ISRCTN

```{r ISRCTNpubstable}
DBI::dbReadTable(main_con, "ISRCTN_PM") |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::mutate(
    Query_Date = format(as.Date(as.numeric(Query_Date), origin = "1970-01-01"), "%Y/%m/%d"),
    abstract = stringr::str_trunc(abstract, 200L)
  ) |>
  dplyr::select(
    Program,
    "Guideline" = Guideline.number,
    `Query Date` = Query_Date,
    `Trial ID` = ID,
    PMID = pmid,
    `Publication DOI` = doi,
    Title = title,
    Abstract = abstract,
    Journal = jabbrv,
    Condition = Short..working.title. ## cut this out due to non-UTF-8 character
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### NIHR

```{r NIHRpubstable}
DBI::dbReadTable(main_con, "NIHR_PM") |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
  dplyr::mutate(
    Query_Date = format(as.Date(as.numeric(Query_Date), origin = "1970-01-01"), "%Y/%m/%d"),
    abstract = stringr::str_trunc(abstract, 200L)
  ) |>
  dplyr::select(
    Program,
    "Guideline" = Guideline.number,
    `Query Date` = Query_Date,
    `Trial ID` = ID,
    PMID = pmid,
    `Publication DOI` = doi,
    Title = title,
    Abstract = abstract,
    Journal = jabbrv,
    Condition = Short..working.title.
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### Clinicaltrials.eu

```{r EUpubstable}
if ("EU_PM" %in% DBI::dbListTables(main_con)) {
  DBI::dbReadTable(main_con, "EU_PM") |>
    dplyr::mutate(across(.cols = everything(), .fns = clean_UTF)) |>
    dplyr::mutate(
      Query_Date = format(as.Date(as.numeric(Query_Date), origin = "1970-01-01"), "%Y/%m/%d"),
      abstract = stringr::str_trunc(abstract, 200L)
    ) |>
    dplyr::select(
      Program,
      "Guideline" = Guideline.number,
      `Query Date` = Query_Date,
      `Trial ID` = ID,
      PMID = pmid,
      `Publication DOI` = doi,
      Title = title,
      Abstract = abstract,
      Journal = jabbrv,
      Condition = Short..working.title.
    ) |>
    dplyr::distinct() |>
    DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
}
```

:::

# Add/Remove Trials and Trial Comments

::: {.panel-tabset}

### Add Trial

There are two ways to add trials:

1.  Add one at a time, choosing the relevant registry button, completing the guideline number, trial ID, and URL boxes, then pressing 'add trial'.
2.  Add more than one trial at once by uploading a spreadsheet containing relevant details using the 'choose file' box on the next tab.

**Note that Trial ID reference number must be in the correct format. Eg:**

-   Clinicaltrials.gov - "NCT03883230"
-   ISRCTN - "ISRCTN11735271"
-   NIHR - "14-158-02" or "14/158/02" or "RP-PG-0109-10056"
-   Clinicaltrials.eu - "2007-003673-21" (omit the last two letters designating country)

```{r AddSingleTrial}
#| context: server

shiny::inputPanel(
  "Add Single Trial",
  shiny::radioButtons(
    "registry_add",
    label = "",
    choices = c(
      "Clinicaltrials.gov" = "NCT_Ids",
      "ISRCTN" = "ISRCTN_Ids",
      "NIHR" = "NIHR_Ids",
      "Clinicaltrials.eu" = "EU_Ids"
    )
  ),
  shiny::selectInput("guideline_program_add",
    label = "Enter program description",
    choices = c("COVID", "IP", "Other"),
    selected = "COVID"
  ),
  shiny::textInput("guideline_reference_add", label = "Enter guideline number(s)", placeholder = "e.g. CG179"),
  shiny::textInput("ID_add", label = "Enter Trial ID reference number", placeholder = " e.g. NCT03597750"),
  shiny::textInput("URL_add",
    label = "Paste URL to trial page in registry",
    placeholder = "e.g. https://clinicaltrials.gov/ct2/show/NCT03597750",
    width = "100%"
  ),
  shiny::textOutput("add_sql_raw"),
  shiny::textOutput("add_sql"),
  shiny::actionButton("button_add", "Add trial"),
  shiny::uiOutput("single_result")
)

```

### Add Multiple Trials

```{r AddMultiTrial}
#| context: server

shiny::inputPanel(
  "Add Multiple Trials via csv file",
  shiny::downloadButton("downloadtemplate", label = "Download template"),
  shiny::fileInput("uploadtemplate", label = "Upload completed template", multiple = FALSE, accept = ".csv"),
  shiny::actionButton("button_add_multi", label = "Add trial spreadsheet"),
  shiny::uiOutput("multi_result")
)

shiny::mainPanel(
  shiny::textOutput("multi_error"),
  shiny::textOutput("multi_fail"),
  shiny::textOutput("multi_success")
)
```

### Remove or Archive Trial

Select relevant registry and trial ID reference number below, along with any comments if archiving.

'Archiving' moves the trial information from the live lists to the relevant archived trials list, where it will no longer be updated. 'Deleting' will remove the trial from the live lists and information will not be stored

```{r Removetab}
#| context: server

shiny::inputPanel(
  shiny::radioButtons(
    "registry_remove",
    label = "Registry",
    choices = c(
      "Clinicaltrials.gov" = "NCT_Ids",
      "ISRCTN" = "ISRCTN_Ids",
      "NIHR" = "NIHR_Ids",
      "Clinicaltrials.eu" = "EU_Ids"
    )
  ),
  shiny::selectInput("ID_remove",
    label = "Select Trial ID reference number",
    choices = ""
  ),
  shiny::textOutput("choices_list"),
  shiny::actionButton("button_delete", "Delete trial"),
  shiny::textInput("comments_archive", "Archive Comments"),
  shiny::actionButton("button_archive", "Archive trial")
)

shiny::mainPanel(
  shiny::textOutput("success_delete"),
  shiny::textOutput("success_archive")
)

```

### Trial Comments

Select trial and amend comments in the box below

```{r TrialComments}
#| context: server

shiny::inputPanel(
  shiny::radioButtons(
    "registry_comment",
    label = "Registry",
    choices = c(
      "Clinicaltrials.gov" = "NCT_Ids",
      "ISRCTN" = "ISRCTN_Ids",
      "NIHR" = "NIHR_Ids",
      "Clinicaltrials.eu" = "EU_Ids"
    )
  ),
  shiny::selectInput("ID_comment",
    label = "Select Trial ID reference number",
    choices = ""
  ),
  shiny::textAreaInput("trial_comments", label = "Comments", placeholder = "Trial Comments", resize = "both"),
  shiny::actionButton("button_comment", "Amend Comments")
)

shiny::mainPanel(
  shiny::textOutput("success_comment")
)

```
:::

# Archived Trials

::: {.panel-tabset}

### ClinicalTrials.gov Archive

```{r CG.govarchive}

DBI::dbReadTable(main_con, "NCT_rxv") |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    `Archive Date` = lubridate::as_date(as.numeric(Query_Date))
  ) |>
  dplyr::select(
    -SeeAlsoLinkURL,
    -Query_Date
  ) |>
  dplyr::select(`Archive Date`,
    everything(),
    `Archiving Comments` = Archiving_Comments
  ) |>
  dplyr::rename(
    "Guideline" = Guideline.number,
    `NCT ID` = NCTId,
    `Org Study ID` = OrgStudyId,
    Title = BriefTitle,
    Status = OverallStatus,
    `Primary Completion Date` = PrimaryCompletionDate,
    `Completion Date` = CompletionDate,
    `Results Submit Date` = ResultsFirstSubmitDate,
    `Results Post Date` = ResultsFirstPostDate,
    `Last Update` = LastUpdatePostDate
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### ISRCTN Archive

```{r ISRCTNarchivetable}

DBI::dbReadTable(main_con, "ISRCTN_rxv") |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    `Archive Date` = lubridate::as_date(as.numeric(Query_Date))
  ) |>
  dplyr::select(-Query_Date) |>
  dplyr::select(
    `Archive Date`,
    everything()
  ) |>
  dplyr::rename(
    "Program or Guideline" = Guideline.number,
    `ISRCTN ID` = ISRCTN_No,
    Title = Public_Title,
    `Scientific Title` = Scientific_Title,
    `Recruitment Status` = Recruitment_Status,
    `Results completed date` = Results_date_completed,
    `Results URL` = Results_url_link,
    `Results summary` = Results_summary,
    `Results posted date` = Results_date_posted,
    `Results published date` = Results_date_first_publication,
    `Archiving Comments` = Archiving_Comments
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### NIHR Archive

```{r NIHRarchivetable}

DBI::dbReadTable(main_con, "NIHR_rxv") |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    `Archive Date` = lubridate::as_date(as.numeric(Query_Date))
  ) |>
  dplyr::select(-Query_Date) |>
  dplyr::select(
    `Archive Date`,
    everything()
  ) |>
  dplyr::rename(
    "Program or Guideline" = Guideline.number,
    `NIHR ID` = project_id,
    `Project Title` = project_title,
    Status = project_status,
    `End Date` = end_date,
    `Archiving Comments` = Archiving_Comments
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

### EU Archive

```{r EUarchivetable}

DBI::dbReadTable(main_con, "EU_rxv") |>
  dplyr::select(-a31_title_of_the_trial_for_lay_people_in_easily_understood_ie_nontechnical_language, -EU_Ids) |>
  dplyr::mutate(across(.cols = everything(), .fns = clean_UTF),
    `Archive Date` = lubridate::as_date(as.numeric(Query_Date))
  ) |>
  dplyr::select(-Query_Date) |>
  dplyr::rename(
    "Program or Guideline" = Guideline.number,
    `Clinicaltrials.eu ID` = `X_id`,
    `End of Trial Status` = p_end_of_trial_status,
    Title = a3_full_title_of_the_trial,
    `Abbreviated Title` = a32_name_or_abbreviated_title_of_the_trial_where_available,
    `Sponsor ID` = a41_sponsors_protocol_code_number,
    `Archiving Comments` = Archiving_Comments
  ) |>
  dplyr::distinct() |>
  DT::datatable(options = list(bPaginate = FALSE, scrollY = TRUE), filter = "top")
```

:::

```{r ServerCode}
#| context: server

### ADD SINGLE TRIAL
  
# SQL template for adding single trial
sql_add <-
  "INSERT INTO Trial_Ids ([Program], [Guideline.number], [URL], [?registry]) VALUES (?program_value, ?Guideline_Reference, ?URL, ?ID)"

# Reactive to create SQL statement to add single trial
exp_add <- shiny::reactive({
  DBI::sqlInterpolate(
    main_con,
    sql_add,
    registry = DBI::SQL(input$registry_add),
    program_value = input$guideline_program_add,
    Guideline_Reference = input$guideline_reference_add,
    URL = stringr::str_trim(input$URL_add),
    ID = stringr::str_trim(input$ID_add)
  )
})

# Render reactive to debug
output$add_sql_raw <- shiny::renderText(exp_add)
output$add_sql <- shiny::renderText(as.character(exp_add))

# Single trial add logic
shiny::observeEvent(input$button_add, {
  valid_id_check <- stringr::str_detect(input$ID_add, paste(c(NCT_pattern, EU_pattern, ISRCTN_pattern, NIHR_pattern), collapse = "|"))

  if (valid_id_check) {
    shinybusy::show_modal_spinner(spin = "semipolar", color = "#344feb", text = "Adding Trial - please wait while the dashboard refreshes in background....")

    DBI::dbExecute(main_con, exp_add())

    trialtracker::download_trial_info_wrapper_no_pm_or_email()

    shinybusy::remove_modal_spinner()

    output$single_result <- shiny::renderText({
      shiny::HTML(as.character(div(
        style = "color: green;",
        "Trial Added! - please refresh browser to see trial details on Live Trial Info tab"
      )))
    })
  } else if (!valid_id_check) {
    output$single_result <- shiny::renderText({
      shiny::HTML(as.character(div(
        style = "color: red;",
        "Error - Invalid trial ID reference number, please check ID against the above approved formats"
      )))
    })
  }
})

## ADD MULTIPLE TRIALS

# Function to allow downloading of template
output$downloadtemplate <- shiny::downloadHandler(
  filename = function() {
    "trialuploadtemplate.csv"
  },
  content = function(file) {
    readr::write_csv(
      readr::read_csv("trialuploadtemplate.csv",
        col_types = cols(.default = col_character())
      ),
      file,
      na = ""
    )
  }
)

# Reactive for multiple uploads
to_add <- shiny::reactive({
  inFile <- input$uploadtemplate
  upload <- readr::read_csv(file = inFile$datapath, col_types = cols(.default = col_character()))
})

# Multiple upload logic
shiny::observeEvent(input$uploadtemplate, {
  NCT_check <- stringr::str_detect(tidyr::replace_na(to_add()$NCT_Ids, ""), NCT_pattern)
  EU_check <- stringr::str_detect(tidyr::replace_na(to_add()$EU_Ids, ""), EU_pattern)
  ISRCTN_check <- stringr::str_detect(tidyr::replace_na(to_add()$ISRCTN_Ids, ""), ISRCTN_pattern)
  NIHR_check <- stringr::str_detect(tidyr::replace_na(to_add()$NIHR_Ids, ""), NIHR_pattern)
  Valid_ID <- {
    NCT_check | EU_check | ISRCTN_check | NIHR_check
  }
  errors <- which(!Valid_ID)

  output$errors <- shiny::renderText({
    paste0("errors = ", as.character(errors))
  })
  output$errors_length <- shiny::renderText({
    paste0("errors_length = ", as.character(length(errors)))
  })

  if (length(errors) > 0L) {
    output$multi_result <- shiny::renderText({
      shiny::HTML(as.character(div(
        style = "color: red;",
        paste(
          "ERROR - Missing or incorrect Trial ID on line(s)", as.character(errors),
          ", please correct these IDs and reupload the file"
        )
      )))
    })
  } else if (length(errors) == 0L) {
    output$multi_result <- shiny::renderText({
      shiny::HTML(as.character(div(
        style = "color: green;",
        "File has passed input checks and is ready for upload"
      )))
    })
  }
})
shiny::observeEvent(input$button_add_multi, {
  NCT_check <- stringr::str_detect(tidyr::replace_na(to_add()$NCT_Ids, ""), NCT_pattern)
  EU_check <- stringr::str_detect(tidyr::replace_na(to_add()$EU_Ids, ""), EU_pattern)
  ISRCTN_check <- stringr::str_detect(tidyr::replace_na(to_add()$ISRCTN_Ids, ""), ISRCTN_pattern)
  NIHR_check <- stringr::str_detect(tidyr::replace_na(to_add()$NIHR_Ids, ""), NIHR_pattern)
  Valid_ID <- {
    NCT_check | EU_check | ISRCTN_check | NIHR_check
  }
  multi_errors <- which(!Valid_ID)

  output$multi_errors <- shiny::renderText({
    paste0("multi_errors = ", as.character(multi_errors))
  })
  output$multi_errors_length <- shiny::renderText({
    paste0("multi_errors_length = ", as.character(length(multi_errors)))
  })

  if (length(multi_errors) == 0L) {
    shinybusy::show_modal_spinner(spin = "semipolar", color = "#344feb", text = "Adding Trials - please wait while the dashboard refreshes in background....")

    DBI::dbAppendTable(main_con, "Trial_Ids", to_add())

    trialtracker::download_trial_info_wrapper_no_pm_or_email()

    shinybusy::remove_modal_spinner()

    output$multi_result <- shiny::renderText({
      shiny::HTML(as.character(div(
        style = "color: green;",
        "Multiple Trials Added! - please refresh browser to see trial details on Live Trial Info tab"
      )))
    })
  } else if (length(multi_errors) > 0L) {
    output$multi_result <- shiny::renderText({
      shiny::HTML(as.character(div(
        style = "color: red;",
        "Error - Please correct errors in trial ID numbers on upload sheet before resubmitting"
      )))
    })
  }
})

#### REMOVE OR ARCHIVE TRIALS

# SQL template for deleting trial id from Trial_Ids
sql_delete <- "DELETE FROM Trial_Ids WHERE ?ColID = ?ID_Selected"

# Reactive to pull id to insert into SQL delete request
exp_delete <- shiny::reactive({
  DBI::sqlInterpolate(
    main_con,
    sql_delete,
    ColID = DBI::SQL(dplyr::case_when(
      input$registry_remove == "NIHR_Ids" ~ "REPLACE(NIHR_Ids, '-', '')",
      TRUE ~ input$registry_remove
    )),
    ID_Selected = if (input$registry_remove == "NIHR_Ids") {
      stringr::str_replace_all(input$ID_remove, "(/)|(-)", "")
    } else {
      input$ID_remove
    }
  )
})

# Render output [used in debugging when enabled in UI]
output$exp_delete <- shiny::renderText(exp_delete())

#Delete logic
shiny::observeEvent(input$button_delete, {
  shinybusy::show_modal_spinner(spin = "semipolar", color = "#344feb", text = "Deleting Trial - please wait while the dashboard refreshes in background....")

  DBI::dbExecute(main_con, exp_delete())

  trialtracker::download_trial_info_wrapper_no_pm_or_email()

  shinybusy::remove_modal_spinner()

  output$success_delete <- shiny::renderText("Trial Deleted! Refresh browser for this to update on the live trial lists")
})

#Update remove list
shiny::observeEvent(input$registry_remove, {
  choices_list <- DBI::dbReadTable(main_con, "Trial_Ids") |>
    dplyr::select(ids = input$registry_remove) |>
    tidyr::drop_na() |>
    dplyr::arrange(stringr::str_remove_all(ids, "[A-Z]|-"))
  
  shiny::updateSelectInput(session, "ID_remove", choices = choices_list)
  
  output$choices_list <- shiny::renderText(choices_list)
  
})

# SQL template for SQL archive select statement
sql_archive <- "SELECT * FROM ?Orig_Table WHERE ?ColID = ?ID_Selected"

# Reactive for pulling id to insert into SQL archiving request
exp_archive_pull <- shiny::reactive({
  DBI::sqlInterpolate(
    main_con,
    sql_archive,
    Orig_Table = DBI::SQL(stringr::str_sub(input$registry_remove, end = -5L)),
    ColID = DBI::SQL(dplyr::case_when(
      input$registry_remove == "NCT_Ids" ~ "NCTId",
      input$registry_remove == "NIHR_Ids" ~ "REPLACE(REPLACE(project_id,'-',''),'/','')",
      input$registry_remove == "ISRCTN_Ids" ~ "ISRCTN_No",
      input$registry_remove == "EU_Ids" ~ "EU_Ids"
    )),
    ID_Selected = if (input$registry_remove == "NIHR_Ids") {
      stringr::str_replace_all(input$ID_remove, "(/)|(-)", "")
    } else {
      input$ID_remove
    }
  )
})

# Render output [used in debugging when enabled in UI]
output$exp_archive <- shiny::renderText(exp_archive_pull())

#Archive logic
shiny::observeEvent(input$button_archive, {
  shinybusy::show_modal_spinner(spin = "semipolar", color = "#344feb", text = "Archiving Trial - please wait while the dashboard refreshes in background....")

  pulled_trial_data <- DBI::dbGetQuery(main_con, exp_archive_pull()) |>
    dplyr::slice_max(Query_Date) |>
    dplyr::mutate("Archiving_Comments" = stringr::str_remove(paste(Comments, as.character(input$comments_archive), collapse = " "), "NA"))

  # write to db (append)
  DBI::dbWriteTable(main_con, paste0(stringr::str_sub(input$registry_remove, end = -5L), "_rxv"), pulled_trial_data, append = TRUE)

  DBI::dbExecute(main_con, exp_delete())

  trialtracker::download_trial_info_wrapper_no_pm_or_email()

  shinybusy::remove_modal_spinner()

  # return some success message
  output$success_archive <- shiny::renderText("Trial Successfully Archived. It should disappear from live lists and appear in archive on browser refresh")
})

### TRIAL COMMENTS

# Update comment choice list
shiny::observeEvent(input$registry_comment, {
  choices_list <- DBI::dbReadTable(main_con, "Trial_Ids") |>
    dplyr::select(ids = input$registry_comment) |>
    tidyr::drop_na() |>
    dplyr::arrange(stringr::str_remove_all(ids, "[A-Z]|-"))

  shiny::updateSelectInput(session, "ID_comment", choices = choices_list)
})

# SQL template for pulling comments
sql_comments_pull <- "SELECT Comments FROM ?Orig_Table WHERE [?ColID] = ?comment_id AND Query_Date IN (SELECT max(Query_Date) FROM ?Orig_Table)"

# Reactive to generate SQL code based on template
exp_comment_pull <- shiny::reactive({
  DBI::sqlInterpolate(
    main_con,
    sql_comments_pull,
    Orig_Table = DBI::SQL(stringr::str_sub(input$registry_comment, end = -5L)),
    ColID = DBI::SQL(dplyr::case_when(
      input$registry_comment == "NCT_Ids" ~ "NCTId",
      input$registry_comment == "NIHR_Ids" ~ "project_id",
      input$registry_comment == "ISRCTN_Ids" ~ "ISRCTN_No",
      input$registry_comment == "EU_Ids" ~ "EU_Ids"
    )),
    comment_id = input$ID_comment
  )
})

pulled_comments <- shiny::reactive({
  DBI::dbGetQuery(main_con, exp_comment_pull()) |> as.character()
})

# Rendering of queries (for debugging if inserted into UI)
output$comment_sql <- shiny::renderText(exp_comment_pull())
output$fetch_comment_SQL <- shiny::renderText(pulled_comments())

# Comment logic
shiny::observeEvent(input$ID_comment, {
  updateTextAreaInput(session, "trial_comments", value = pulled_comments())
})

shiny::observeEvent(input$button_comment, {
  # Add spinner
  shinybusy::show_modal_spinner(spin = "semipolar", color = "#344feb", text = "Amending Comments - please wait while the dashboard refreshes in background....")

  # Take contents of button
  comment_text <- input$trial_comments

  # Derive SQL to insert into table
  comment_insert_sql <- "UPDATE ?TabID SET Comments = ?comment_text WHERE ?ID_name == ?id_no"

  update_comment_sql <-
    DBI::sqlInterpolate(main_con,
      comment_insert_sql,
      TabID = DBI::SQL(stringr::str_sub(input$registry_comment, end = -5L)),
      comment_text = comment_text,
      ID_name = DBI::SQL(dplyr::case_when(
        input$registry_comment == "NCT_Ids" ~ "NCTId",
        input$registry_comment == "NIHR_Ids" ~ "project_id",
        input$registry_comment == "ISRCTN_Ids" ~ "ISRCTN_No",
        input$registry_comment == "EU_Ids" ~ "EU_Ids"
      )),
      id_no = input$ID_comment
    )

  # Action SQL
  DBI::dbExecute(main_con, update_comment_sql)

  # Remove spinner
  shinybusy::remove_modal_spinner()

  # return some success message
  output$success_comment <- shiny::renderText("Comments Successfully Updated - please refresh dashboard to see updated comments")
})

```
